# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: checkN
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "dynamoDB:*"
    Resource: "arn:aws:dynamodb:us-west-2:995441987960:table/*"

functions:
  getPostById:
    handler: js/posts-api/handler.getPostById
    events:
      - http:
          path: posts/{postId}
          method: get

  deletePost:
    handler: js/posts-api/handler.deletePost
    events:
      - http:
          path: posts/{postId}
          method: delete

  createPost:
    handler: js/posts-api/handler.createPost
    events:
      - http:
          path: posts
          method: post

  updatePost:
    handler: js/posts-api/handler.updatePost
    events:
      - http:
          path: posts/{postId}
          method: put

  getCommentsByPostId:
    handler: js/posts-api/handler.getCommentsByPostId
    events:
      - http:
          path: posts/{postId}/comments
          method: get

  getCommentsBySearch:
    handler: js/posts-api/handler.getCommentsBySearch
    events:
      - http:
          path: comments
          method: get

  deleteComment:
    handler: js/posts-api/handler.deleteComment
    events:
      - http:
          path: posts/{postId}/comments/{commentId}
          method: delete

  createComment:
    handler: js/posts-api/handler.createComment
    events:
      - http:
          path: posts/{postId}/comments
          method: post

  updateComment:
    handler: js/posts-api/handler.updateComment
    events:
      - http:
          path: posts/{postId}/comments/{commentId}
          method: put

resources:
  Resources:
    posts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: posts
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    dogs:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dogs
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    
    users:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: users
          AttributeDefinitions:
            - AttributeName: userId
              AttributeType: S
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

    comments:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: comments
          AttributeDefinitions:
            - AttributeName: commentId
              AttributeType: S
          KeySchema:
            - AttributeName: commentId
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

    tags:
      Type: AWS::DynamoDB::Table
      Properties:
          TableName: tags
          AttributeDefinitions:
            - AttributeName: tagId
              AttributeType: S
          KeySchema:
            - AttributeName: tagId
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
