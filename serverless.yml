# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: technology-speaks-capstone
provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-west-2
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "dynamoDB:*"
    Resource: "arn:aws:dynamodb:us-west-2:995441987960:table/*"

# you can add statements to the Lambda function's IAM Role here

   

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getPostById:
    handler: js/posts-api/handler.getPostById
    events:
      - http:
          path: posts/{postId}
          method: get

  deletePost:
    handler: js/posts-api/handler.deletePost
    events:
      - http:
          path: posts/{postId}
          method: delete

  createPost:
    handler: js/posts-api/handler.createPost
    events:
      - http:
          path: posts
          method: post

  updatePostContent:
    handler: js/posts-api/handler.updatePostContent
    events:
      - http:
          path: posts/{postId}
          method: put

  updatePostState:
    handler: js/posts-api/handler.updatePostState
    events:
      - http:
          path: posts/{postId}/state/{state}
          method: put

  getDog:
    handler: js/posts-api/handler.getDog
    events:
      - http:
          path: dogs/{dogId}
          method: get

  getDogs:
    handler: js/posts-api/handler.getDogs
    events:
      - http:
          path: dogs
          method: get

  createDog:
    handler: js/posts-api/handler.createDog
    events:
      - http:
          path: dogs
          method: post

resources:
  Resources:
    posts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: posts
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    dogs:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dogs
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    
    # users:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #       TableName: users
    #       AttributeDefinitions:
    #         - AttributeName: id
    #           AttributeType: S
    #       KeySchema:
    #         - AttributeName: id
    #           KeyType: HASH
    #       ProvisionedThroughput:
    #         ReadCapacityUnits: 5
    #         WriteCapacityUnits: 5

    # comments:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #       TableName: comments
    #       AttributeDefinitions:
    #         - AttributeName: id
    #           AttributeType: S
    #       KeySchema:
    #         - AttributeName: id
    #           KeyType: HASH
    #       ProvisionedThroughput:
    #         ReadCapacityUnits: 5
    #         WriteCapacityUnits: 5

    # tags:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #       TableName: tags
    #       AttributeDefinitions:
    #         - AttributeName: id
    #           AttributeType: S
    #       KeySchema:
    #         - AttributeName: id
    #           KeyType: HASH
    #       ProvisionedThroughput:
    #         ReadCapacityUnits: 5
    #         WriteCapacityUnits: 5
