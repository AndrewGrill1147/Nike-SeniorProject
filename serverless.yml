service: checkN
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "dynamoDB:*"
    Resource: "arn:aws:dynamodb:us-west-2:995441987960:table/*"

package:
  individually: true
  exclude:
    - "*/**"

functions:
  getPostById:
    handler: js/posts-api/handler.getPostById
    events:
      - http:
          path: posts/{postId}
          method: get
          cors: true
    package:
      include:
        - js/posts-api/getPostById.js
        - js/posts-api/handler.js
        - js/posts-api/responses.js

  getPostsBySearch:
    handler: js/posts-api/handler.getPostsBySearch
    events:
      - http:
          path: posts
          method: get
          cors: true
    package:
      include:
        - js/posts-api/getPostsBySearch.js
        - js/posts-api/handler.js
        - js/posts-api/responses.js

  deletePost:
    handler: js/posts-api/handler.deletePost
    events:
      - http:
          path: posts/{postId}
          method: delete
          cors: true
    package:
      include:
        - js/posts-api/deletePost.js
        - js/posts-api/handler.js
        - js/posts-api/responses.js

  createPost:
    handler: js/posts-api/handler.createPost
    events:
      - http:
          path: posts
          method: post  
          cors: true      
    package:
      include:
        - js/posts-api/createPost.js
        - js/posts-api/handler.js
        - js/posts-api/responses.js
        - node_modules/moment/**

  updatePost:
    handler: js/posts-api/handler.updatePost
    events:
      - http:
          path: posts/{postId}
          method: put
          cors: true
    package:
      include:
        - js/posts-api/updatePost.js
        - js/posts-api/handler.js
        - js/posts-api/responses.js
        - node_modules/moment/**

  getCommentsByPostId:
    handler: js/comments-api/handler.getCommentsByPostId
    events:
      - http:
          path: posts/{postId}/comments
          method: get
          cors: true
    package:
      include:
        - js/comments-api/getCommentsByPostId.js
        - js/comments-api/handler.js
        - js/comments-api/responses.js

  getCommentsBySearch:
    handler: js/comments-api/handler.getCommentsBySearch
    events:
      - http:
          path: comments
          method: get
          cors: true
    package:
      include:
        - js/comments-api/getCommentsBySearch.js
        - js/comments-api/handler.js
        - js/comments-api/responses.js

  deleteComment:
    handler: js/comments-api/handler.deleteComment
    events:
      - http:
          path: posts/{postId}/comments/{commentId}
          method: delete
          cors: true
    package:
      include:
        - js/comments-api/deleteComment.js
        - js/comments-api/handler.js
        - js/comments-api/responses.js

  createComment:
    handler: js/comments-api/handler.createComment
    events:
      - http:
          path: posts/{postId}/comments
          method: post
          cors: true
    package:
      include:
        - js/comments-api/createComment.js
        - js/comments-api/handler.js
        - js/comments-api/responses.js
        - node_modules/moment/**

  updateComment:
    handler: js/comments-api/handler.updateComment
    events:
      - http:
          path: posts/{postId}/comments/{commentId}
          method: put
          cors: true
    package:
      include:
        - js/comments-api/updateComment.js
        - js/comments-api/handler.js
        - js/comments-api/responses.js
        - node_modules/moment/**

resources:
  Resources:
    # posts:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: posts-dev
    #     AttributeDefinitions:
    #       - AttributeName: postId
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: postId
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5
    
    # users:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #       TableName: users
    #       AttributeDefinitions:
    #         - AttributeName: userId
    #           AttributeType: S
    #       KeySchema:
    #         - AttributeName: userId
    #           KeyType: HASH
    #       ProvisionedThroughput:
    #         ReadCapacityUnits: 5
    #         WriteCapacityUnits: 5

    # comments:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #       TableName: comments
    #       AttributeDefinitions:
    #         - AttributeName: commentId
    #           AttributeType: S
    #       KeySchema:
    #         - AttributeName: commentId
    #           KeyType: HASH
    #       ProvisionedThroughput:
    #         ReadCapacityUnits: 5
    #         WriteCapacityUnits: 5

    # tags:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #       TableName: tags
    #       AttributeDefinitions:
    #         - AttributeName: tagId
    #           AttributeType: S
    #       KeySchema:
    #         - AttributeName: tagId
    #           KeyType: HASH
    #       ProvisionedThroughput:
    #         ReadCapacityUnits: 5
    #         WriteCapacityUnits: 5
